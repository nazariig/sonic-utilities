"""
This CLI plugin was auto-generated by using 'sonic-cli-gen' utility
"""

import click
import tabulate
import utilities_common.cli as clicommon

from utilities_common.switch_hash import (
    CFG_SWITCH_HASH,
    STATE_SWITCH_CAPABILITY,
    SW_CAP_HASH_FIELD_LIST_KEY,
    SW_CAP_ECMP_HASH_ALGORITHM_KEY,
    SW_CAP_LAG_HASH_ALGORITHM_KEY,
    SW_CAP_ECMP_HASH_CAPABLE_KEY,
    SW_CAP_LAG_HASH_CAPABLE_KEY,
    SW_CAP_ECMP_HASH_ALGORITHM_CAPABLE_KEY,
    SW_CAP_LAG_HASH_ALGORITHM_CAPABLE_KEY,
    SW_HASH_KEY,
    SW_CAP_KEY,
)

#
# Hash helpers --------------------------------------------------------------------------------------------------------
#

def format_attr_value(entry, attr):
    """ Helper that formats attribute to be presented in the table output.

    Args:
        entry (Dict[str, str]): CONFIG DB entry configuration.
        attr (Dict): Attribute metadata.

    Returns:
        str: formatted attribute value.
    """

    if attr["is-leaf-list"]:
        value = entry.get(attr["name"], [])
        return "\n".join(value) if value else "N/A"
    return entry.get(attr["name"], "N/A")

#
# Hash CLI ------------------------------------------------------------------------------------------------------------
#

@click.group(
    name="switch-hash",
    cls=clicommon.AliasedGroup
)
def SWITCH_HASH():
    """ Show switch hash feature configuration """

    pass


@SWITCH_HASH.command(
    name="global"
)
@clicommon.pass_db
def SWITCH_HASH_GLOBAL(db):
    """ Show switch hash global configuration """

    ecmp_header = [
        "ECMP HASH",
        "ECMP HASH ALGORITHM",
    ]
    ecmp_body = []

    lag_header = [
        "LAG HASH",
        "LAG HASH ALGORITHM",
    ]
    lag_body = []

    table = db.cfgdb.get_table(CFG_SWITCH_HASH)
    entry = table.get(SW_HASH_KEY, {})

    if not entry:
        click.echo(tabulate.tabulate(ecmp_body, ecmp_header))
        click.echo()
        click.echo(tabulate.tabulate(lag_body, lag_header))
        return

    ecmp_row = [
        format_attr_value(
            entry,
            {
                'name': 'ecmp_hash',
                'is-leaf-list': True
            }
        ),
        format_attr_value(
            entry,
            {
                'name': 'ecmp_hash_algorithm',
                'is-leaf-list': False
            }
        ),
    ]
    ecmp_body.append(ecmp_row)

    lag_row = [
        format_attr_value(
            entry,
            {
                'name': 'lag_hash',
                'is-leaf-list': True
            }
        ),
        format_attr_value(
            entry,
            {
                'name': 'lag_hash_algorithm',
                'is-leaf-list': False
            }
        ),
    ]
    lag_body.append(lag_row)

    click.echo(tabulate.tabulate(ecmp_body, ecmp_header))
    click.echo()
    click.echo(tabulate.tabulate(lag_body, lag_header))


@SWITCH_HASH.command(
    name="capabilities"
)
@clicommon.pass_db
def SWITCH_HASH_CAPABILITIES(db):
    """ Show switch hash capabilities """

    ecmp_header = [
        "ECMP HASH",
        "ECMP HASH ALGORITHM",
    ]
    ecmp_body = []

    lag_header = [
        "LAG HASH",
        "LAG HASH ALGORITHM",
    ]
    lag_body = []

    entry = db.db.get_all(db.db.STATE_DB, "{}|{}".format(STATE_SWITCH_CAPABILITY, SW_CAP_KEY))

    if not entry:
        click.echo(tabulate.tabulate(ecmp_body, ecmp_header))
        click.echo()
        click.echo(tabulate.tabulate(lag_body, lag_header))
        return

    entry.setdefault(SW_CAP_HASH_FIELD_LIST_KEY, 'N/A')
    entry.setdefault(SW_CAP_ECMP_HASH_ALGORITHM_KEY, 'N/A')
    entry.setdefault(SW_CAP_LAG_HASH_ALGORITHM_KEY, 'N/A')
    entry.setdefault(SW_CAP_ECMP_HASH_CAPABLE_KEY, 'false')
    entry.setdefault(SW_CAP_LAG_HASH_CAPABLE_KEY, 'false')
    entry.setdefault(SW_CAP_ECMP_HASH_ALGORITHM_CAPABLE_KEY, 'false')
    entry.setdefault(SW_CAP_LAG_HASH_ALGORITHM_CAPABLE_KEY, 'false')

    if not entry[SW_CAP_HASH_FIELD_LIST_KEY]:
        entry[SW_CAP_HASH_FIELD_LIST_KEY] = "no capabilities"

    if not entry[SW_CAP_ECMP_HASH_ALGORITHM_KEY]:
        entry[SW_CAP_ECMP_HASH_ALGORITHM_KEY] = "no capabilities"

    if not entry[SW_CAP_LAG_HASH_ALGORITHM_KEY]:
        entry[SW_CAP_LAG_HASH_ALGORITHM_KEY] = "no capabilities"

    entry[SW_CAP_HASH_FIELD_LIST_KEY] = entry[SW_CAP_HASH_FIELD_LIST_KEY].split(',')
    entry[SW_CAP_ECMP_HASH_ALGORITHM_KEY] = entry[SW_CAP_ECMP_HASH_ALGORITHM_KEY].split(',')
    entry[SW_CAP_LAG_HASH_ALGORITHM_KEY] = entry[SW_CAP_LAG_HASH_ALGORITHM_KEY].split(',')

    ecmp_row = [
        format_attr_value(
            entry,
            {
                'name': SW_CAP_HASH_FIELD_LIST_KEY,
                'is-leaf-list': True
            }
        ) if entry[SW_CAP_ECMP_HASH_CAPABLE_KEY] == 'true' else 'not supported',
        format_attr_value(
            entry,
            {
                'name': SW_CAP_ECMP_HASH_ALGORITHM_KEY,
                'is-leaf-list': True
            }
        ) if entry[SW_CAP_ECMP_HASH_ALGORITHM_CAPABLE_KEY] == 'true' else 'not supported',
    ]
    ecmp_body.append(ecmp_row)

    lag_row = [
        format_attr_value(
            entry,
            {
                'name': SW_CAP_HASH_FIELD_LIST_KEY,
                'is-leaf-list': True
            }
        ) if entry[SW_CAP_LAG_HASH_CAPABLE_KEY] == 'true' else 'not supported',
        format_attr_value(
            entry,
            {
                'name': SW_CAP_LAG_HASH_ALGORITHM_KEY,
                'is-leaf-list': True
            }
        ) if entry[SW_CAP_LAG_HASH_ALGORITHM_CAPABLE_KEY] == 'true' else 'not supported',
    ]
    lag_body.append(lag_row)

    click.echo(tabulate.tabulate(ecmp_body, ecmp_header))
    click.echo()
    click.echo(tabulate.tabulate(lag_body, lag_header))


def register(cli):
    """ Register new CLI nodes in root CLI.

    Args:
        cli (click.core.Command): Root CLI node.
    Raises:
        Exception: when root CLI already has a command
                   we are trying to register.
    """
    cli_node = SWITCH_HASH
    if cli_node.name in cli.commands:
        raise Exception(f"{cli_node.name} already exists in CLI")
    cli.add_command(SWITCH_HASH)
